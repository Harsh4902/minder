"use strict";(self.webpackChunkstacklok=self.webpackChunkstacklok||[]).push([[6237],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>h});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),p=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(a),m=n,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||o;return a?r.createElement(h,i(i({ref:t},u),{},{components:a})):r.createElement(h,i({ref:t},u))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:n,i[1]=l;for(var p=2;p<o;p++)i[p]=a[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},63074:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=a(87462),n=(a(67294),a(3905));const o={id:"run_the_server",title:"Run the server",sidebar_position:4,slug:"/run-the-server",displayed_sidebar:"mediator"},i="Run a mediator server",l={unversionedId:"run_mediator_server/run_the_server",id:"run_mediator_server/run_the_server",title:"Run the server",description:"Mediator is platform, comprising of a controlplane, a CLI and a database.",source:"@site/docs/run_mediator_server/run_the_server.md",sourceDirName:"run_mediator_server",slug:"/run-the-server",permalink:"/run-the-server",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"run_the_server",title:"Run the server",sidebar_position:4,slug:"/run-the-server",displayed_sidebar:"mediator"},sidebar:"mediator",previous:{title:"Manage policies and violations",permalink:"/manage_policies"},next:{title:"Configure OAuth Provider",permalink:"/config_oauth"}},s={},p=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Download the latest release",id:"download-the-latest-release",level:2},{value:"Build from source",id:"build-from-source",level:2},{value:"Clone the repository",id:"clone-the-repository",level:3},{value:"Build the application",id:"build-the-application",level:3},{value:"Database creation",id:"database-creation",level:2},{value:"Using a container",id:"using-a-container",level:3},{value:"Create the database",id:"create-the-database",level:3},{value:"Create encryption keys",id:"create-encryption-keys",level:2},{value:"Run the application",id:"run-the-application",level:2}],u={toc:p},c="wrapper";function d(e){let{components:t,...a}=e;return(0,n.kt)(c,(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"run-a-mediator-server"},"Run a mediator server"),(0,n.kt)("p",null,"Mediator is platform, comprising of a controlplane, a CLI and a database."),(0,n.kt)("p",null,"The control plane runs two endpoints, a gRPC endpoint and a HTTP endpoint."),(0,n.kt)("p",null,"Mediator is controlled and managed via the CLI application ",(0,n.kt)("inlineCode",{parentName:"p"},"medic"),"."),(0,n.kt)("p",null,"PostgreSQL is used as the database."),(0,n.kt)("p",null,"There are two methods to get started with Mediator, either by downloading the\nlatest release, building from source or (quickest) using the provided ",(0,n.kt)("inlineCode",{parentName:"p"},"docker-compose"),"\nfile."),(0,n.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://golang.org/doc/install"},"Go 1.20")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://www.postgresql.org/download/"},"PostgreSQL"))),(0,n.kt)("h2",{id:"download-the-latest-release"},"Download the latest release"),(0,n.kt)("p",null,"[stub for when we cut a first release]"),(0,n.kt)("h2",{id:"build-from-source"},"Build from source"),(0,n.kt)("p",null,"Alternatively, you can build from source."),(0,n.kt)("h3",{id:"clone-the-repository"},"Clone the repository"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"git clone git@github.com:stacklok/mediator.git\n")),(0,n.kt)("h3",{id:"build-the-application"},"Build the application"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"make build\n")),(0,n.kt)("p",null,"This will create two binaries, ",(0,n.kt)("inlineCode",{parentName:"p"},"bin/mediator-server")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"bin/medic"),"."),(0,n.kt)("p",null,"You may now copy these into a location on your path, or run them directly from the ",(0,n.kt)("inlineCode",{parentName:"p"},"bin")," directory."),(0,n.kt)("p",null,"You will also need a configuration file. You can copy the example configuration file from ",(0,n.kt)("inlineCode",{parentName:"p"},"configs/config.yaml.example")," to ",(0,n.kt)("inlineCode",{parentName:"p"},"$(PWD)/config.yaml"),"."),(0,n.kt)("p",null,"If you prefer to use a different file name or location, you can specify this using the ",(0,n.kt)("inlineCode",{parentName:"p"},"--config"),"\nflag, e.g. ",(0,n.kt)("inlineCode",{parentName:"p"},"mediator-server --config /file/path/mediator.yaml serve")," when you later run the application."),(0,n.kt)("h2",{id:"database-creation"},"Database creation"),(0,n.kt)("p",null,"Mediator requires a PostgreSQL database to be running. You can install this locally, or use a container."),(0,n.kt)("p",null,"Should you install locally, you will need to set certain configuration options in your ",(0,n.kt)("inlineCode",{parentName:"p"},"config.yaml")," file, to reflect your local database configuration."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},'database:\n  dbhost: "localhost"\n  dbport: 5432\n  dbuser: postgres\n  dbpass: postgres\n  dbname: mediator\n  sslmode: disable\n')),(0,n.kt)("h3",{id:"using-a-container"},"Using a container"),(0,n.kt)("p",null,"A simple way to get started is to use the provided ",(0,n.kt)("inlineCode",{parentName:"p"},"docker-compose")," file."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose up -d postgres\n")),(0,n.kt)("h3",{id:"create-the-database"},"Create the database"),(0,n.kt)("p",null,"Once you have a running database, you can create the database using the ",(0,n.kt)("inlineCode",{parentName:"p"},"mediator-server")," CLI tool or via the ",(0,n.kt)("inlineCode",{parentName:"p"},"make")," command."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"make migrateup\n")),(0,n.kt)("p",null,"or:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"mediator-server migrate up\n")),(0,n.kt)("h2",{id:"create-encryption-keys"},"Create encryption keys"),(0,n.kt)("p",null,"Encryption keys are used to encrypt JWT tokens. You can create these using the ",(0,n.kt)("inlineCode",{parentName:"p"},"openssl")," CLI tool."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"ssh-keygen -t rsa -b 2048 -m PEM -f access_token_rsa\nssh-keygen -t rsa -b 2048 -m PEM -f refresh_token_rsa\n# For passwordless keys, run the following:\nopenssl rsa -in access_token_rsa -pubout -outform PEM -out access_token_rsa.pub\nopenssl rsa -in access_token_rsa -pubout -outform PEM -out access_token_rsa.pub\n")),(0,n.kt)("p",null,"These keys should be placed in the ",(0,n.kt)("inlineCode",{parentName:"p"},".ssh")," directory, relative to where you run the ",(0,n.kt)("inlineCode",{parentName:"p"},"mediator-server")," binary. Alternatively, you can specify the location of the keys in the ",(0,n.kt)("inlineCode",{parentName:"p"},"config.yaml")," file."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},'auth:\n  access_token_private_key: "./.ssh/access_token_rsa"\n  access_token_public_key: "./.ssh/access_token_rsa.pub"\n  refresh_token_private_key: "./.ssh/refresh_token_rsa"\n  refresh_token_public_key: "./.ssh/refresh_token_rsa.pub"\n')),(0,n.kt)("h2",{id:"run-the-application"},"Run the application"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"mediator-server serve\n")),(0,n.kt)("p",null,"The application will be available on ",(0,n.kt)("inlineCode",{parentName:"p"},"http://localhost:8080")," and gRPC on ",(0,n.kt)("inlineCode",{parentName:"p"},"localhost:8090"),"."))}d.isMDXComponent=!0}}]);