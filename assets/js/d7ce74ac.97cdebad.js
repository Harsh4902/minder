"use strict";(self.webpackChunkstacklok=self.webpackChunkstacklok||[]).push([[6504],{3905:(e,r,t)=>{t.d(r,{Zo:()=>d,kt:()=>f});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function l(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?l(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function a(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=n.createContext({}),p=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},d=function(e){var r=p(e.components);return n.createElement(c.Provider,{value:r},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,l=e.originalType,c=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),s=p(t),m=o,f=s["".concat(c,".").concat(m)]||s[m]||u[m]||l;return t?n.createElement(f,i(i({ref:r},d),{},{components:t})):n.createElement(f,i({ref:r},d))}));function f(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var l=t.length,i=new Array(l);i[0]=m;var a={};for(var c in r)hasOwnProperty.call(r,c)&&(a[c]=r[c]);a.originalType=e,a[s]="string"==typeof e?e:o,i[1]=a;for(var p=2;p<l;p++)i[p]=t[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5558:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>a,toc:()=>p});var n=t(7462),o=(t(7294),t(3905));const l={},i=void 0,a={unversionedId:"cli/medic_enroll_provider",id:"cli/medic_enroll_provider",title:"medic_enroll_provider",description:"medic enroll provider",source:"@site/docs/cli/medic_enroll_provider.md",sourceDirName:"cli",slug:"/cli/medic_enroll_provider",permalink:"/cli/medic_enroll_provider",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"mediator",previous:{title:"medic_enroll",permalink:"/cli/medic_enroll"},next:{title:"medic_group",permalink:"/cli/medic_group"}},c={},p=[{value:"medic enroll provider",id:"medic-enroll-provider",level:2},{value:"Synopsis",id:"synopsis",level:3},{value:"Options",id:"options",level:3},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:3},{value:"SEE ALSO",id:"see-also",level:3},{value:"Auto generated by spf13/cobra on 12-Jul-2023",id:"auto-generated-by-spf13cobra-on-12-jul-2023",level:6}],d={toc:p},s="wrapper";function u(e){let{components:r,...t}=e;return(0,o.kt)(s,(0,n.Z)({},d,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"medic-enroll-provider"},"medic enroll provider"),(0,o.kt)("p",null,"Enroll a provider within the mediator control plane"),(0,o.kt)("h3",{id:"synopsis"},"Synopsis"),(0,o.kt)("p",null,"The medic enroll provider command allows a user to enroll a provider\nsuch as GitHub into the mediator control plane. Once enrolled, users can perform\nactions such as adding repositories."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"medic enroll provider [flags]\n")),(0,o.kt)("h3",{id:"options"},"Options"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"  -g, --group-id int32    ID of the group for enrolling the provider\n  -h, --help              help for provider\n  -n, --provider string   Name for the provider to enroll\n  -t, --token string      Personal Access Token (PAT) to use for enrollment\n")),(0,o.kt)("h3",{id:"options-inherited-from-parent-commands"},"Options inherited from parent commands"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'      --config string      config file (default is $PWD/config.yaml)\n      --grpc-host string   Server host (default "localhost")\n      --grpc-port int      Server port (default 8090)\n')),(0,o.kt)("h3",{id:"see-also"},"SEE ALSO"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/cli/medic_enroll"},"medic enroll"),"\t - Manage enrollments within a mediator control plane")),(0,o.kt)("h6",{id:"auto-generated-by-spf13cobra-on-12-jul-2023"},"Auto generated by spf13/cobra on 12-Jul-2023"))}u.isMDXComponent=!0}}]);