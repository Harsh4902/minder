"use strict";(self.webpackChunkstacklok=self.webpackChunkstacklok||[]).push([[9142],{3905:(e,t,i)=>{i.d(t,{Zo:()=>m,kt:()=>y});var r=i(67294);function n(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function o(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,r)}return i}function l(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?o(Object(i),!0).forEach((function(t){n(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function c(e,t){if(null==e)return{};var i,r,n=function(e,t){if(null==e)return{};var i,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)i=o[r],t.indexOf(i)>=0||(n[i]=e[i]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)i=o[r],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(n[i]=e[i])}return n}var a=r.createContext({}),p=function(e){var t=r.useContext(a),i=t;return e&&(i="function"==typeof e?e(t):l(l({},t),e)),i},m=function(e){var t=p(e.components);return r.createElement(a.Provider,{value:t},e.children)},s="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var i=e.components,n=e.mdxType,o=e.originalType,a=e.parentName,m=c(e,["components","mdxType","originalType","parentName"]),s=p(i),u=n,y=s["".concat(a,".").concat(u)]||s[u]||d[u]||o;return i?r.createElement(y,l(l({ref:t},m),{},{components:i})):r.createElement(y,l({ref:t},m))}));function y(e,t){var i=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=i.length,l=new Array(o);l[0]=u;var c={};for(var a in t)hasOwnProperty.call(t,a)&&(c[a]=t[a]);c.originalType=e,c[s]="string"==typeof e?e:n,l[1]=c;for(var p=2;p<o;p++)l[p]=i[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,i)}u.displayName="MDXCreateElement"},96839:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var r=i(87462),n=(i(67294),i(3905));const o={},l=void 0,c={unversionedId:"cli/medic_policy",id:"cli/medic_policy",title:"medic_policy",description:"medic policy",source:"@site/docs/cli/medic_policy.md",sourceDirName:"cli",slug:"/cli/medic_policy",permalink:"/cli/medic_policy",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"mediator",previous:{title:"medic_org_list",permalink:"/cli/medic_org_list"},next:{title:"medic_policy_create",permalink:"/cli/medic_policy_create"}},a={},p=[{value:"medic policy",id:"medic-policy",level:2},{value:"Synopsis",id:"synopsis",level:3},{value:"Options",id:"options",level:3},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:3},{value:"SEE ALSO",id:"see-also",level:3}],m={toc:p},s="wrapper";function d(e){let{components:t,...i}=e;return(0,n.kt)(s,(0,r.Z)({},m,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"medic-policy"},"medic policy"),(0,n.kt)("p",null,"Manage policies within a mediator control plane"),(0,n.kt)("h3",{id:"synopsis"},"Synopsis"),(0,n.kt)("p",null,"The medic policy subcommands allows the management of policies within\na mediator controlplane."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"medic policy [flags]\n")),(0,n.kt)("h3",{id:"options"},"Options"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"  -h, --help   help for policy\n")),(0,n.kt)("h3",{id:"options-inherited-from-parent-commands"},"Options inherited from parent commands"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'      --config string      config file (default is $PWD/config.yaml)\n      --grpc-host string   Server host (default "localhost")\n      --grpc-insecure      Allow establishing insecure connections\n      --grpc-port int      Server port (default 8090)\n')),(0,n.kt)("h3",{id:"see-also"},"SEE ALSO"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/cli/medic"},"medic"),"\t - medic controls mediator via the control plane"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/cli/medic_policy_create"},"medic policy create"),"\t - Create a policy within a mediator control plane"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/cli/medic_policy_delete"},"medic policy delete"),"\t - delete a policy within a mediator controlplane"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/cli/medic_policy_get"},"medic policy get"),"\t - Get details for a policy within a mediator control plane"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/cli/medic_policy_list"},"medic policy list"),"\t - List policies within a mediator control plane")))}d.isMDXComponent=!0}}]);