"use strict";(self.webpackChunkstacklok=self.webpackChunkstacklok||[]).push([[8449],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var i=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,i,n=function(e,t){if(null==e)return{};var a,i,n={},r=Object.keys(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=i.createContext({}),s=function(e){var t=i.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=s(e.components);return i.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(a),h=n,m=u["".concat(p,".").concat(h)]||u[h]||d[h]||r;return a?i.createElement(m,o(o({ref:t},c),{},{components:a})):i.createElement(m,o({ref:t},c))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,o=new Array(r);o[0]=h;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:n,o[1]=l;for(var s=2;s<r;s++)o[s]=a[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,a)}h.displayName="MDXCreateElement"},3347:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var i=a(7462),n=(a(7294),a(3905));const r={id:"manage_policies",title:"Getting Started (Manage policies and violations)",sidebar_position:5,slug:"/manage_policies",displayed_sidebar:"mediator"},o="Getting Started (Manage policies)",l={unversionedId:"manage_policies",id:"manage_policies",title:"Getting Started (Manage policies and violations)",description:"In order to detect security deviations from repositories or other entities, Mediator is relying on the concepts of Policy and Violations.",source:"@site/docs/manage_policies.md",sourceDirName:".",slug:"/manage_policies",permalink:"/manage_policies",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{id:"manage_policies",title:"Getting Started (Manage policies and violations)",sidebar_position:5,slug:"/manage_policies",displayed_sidebar:"mediator"},sidebar:"mediator"},p={},s=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"List policy types",id:"list-policy-types",level:2},{value:"Create a policy",id:"create-a-policy",level:2},{value:"List policy status",id:"list-policy-status",level:2},{value:"List policy violations",id:"list-policy-violations",level:2}],c={toc:s},u="wrapper";function d(e){let{components:t,...a}=e;return(0,n.kt)(u,(0,i.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"getting-started-manage-policies"},"Getting Started (Manage policies)"),(0,n.kt)("p",null,"In order to detect security deviations from repositories or other entities, Mediator is relying on the concepts of ",(0,n.kt)("strong",{parentName:"p"},"Policy")," and ",(0,n.kt)("strong",{parentName:"p"},"Violations"),".\nA policy is a definition of a verification we want to do on an entity in a pipeline. By default, Mediator offers a different set\nof ",(0,n.kt)("strong",{parentName:"p"},"policy types"),", covering different aspects of security: repositories, branches, packages, etc...\nA ",(0,n.kt)("strong",{parentName:"p"},"policy")," is an instance of a policy type applied to an specific group, with the relevant settings filled in."),(0,n.kt)("p",null,"When a policy is created for an specific entity, a continuous monitoring for the related objects start. An object can be a repository,\na branch, a package... depending on the policy definition. When an specific object is not matching what's expected,\na ",(0,n.kt)("strong",{parentName:"p"},"Violation")," is raised. When a violation happens, the overall ",(0,n.kt)("strong",{parentName:"p"},"Policy status")," for this specific entity changes,\nbecoming failed. User can check the reason for this violation and take remediation actions to comply with the policy."),(0,n.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The ",(0,n.kt)("inlineCode",{parentName:"li"},"medic")," CLI application"),(0,n.kt)("li",{parentName:"ul"},"A ",(0,n.kt)("a",{parentName:"li",href:"./get_started"},"running mediator instance")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"./config_oauth"},"OAuth Configured")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/enroll_user"},"At least one repository is registered for Mediator"))),(0,n.kt)("h2",{id:"list-policy-types"},"List policy types"),(0,n.kt)("p",null,"A policy is associated to a policy type, and a given group ID. Then the policy checks are propagated\nagainst all the repositories belonging to an specific group. A policy type is associated\nto an specific provider (currently Github)."),(0,n.kt)("p",null,"Covered policy types are now:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"branch_protection: controls the branch protection rules on a repo"),(0,n.kt)("li",{parentName:"ul"},"secret_scanning: enforces secret scanning for a repo")),(0,n.kt)("p",null,"You can list all policy types registered in Mediator:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"medic policy_type list --provider github\n")),(0,n.kt)("p",null,"The format of the policy is being given by the ",(0,n.kt)("inlineCode",{parentName:"p"},"jsonschema")," provided in the policy type."),(0,n.kt)("p",null,"You can get the schema of a policy type with:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"medic policy_type get --provider github --type branch_protection --schema\n")),(0,n.kt)("p",null,"By default, a policy type is providing some recommended default values, so users can create policies\nby using those defaults without having to create a new policy from scratch."),(0,n.kt)("p",null,"You can get the policy type default values with:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"medic policy_type get --provider github --type branch_protection --default_schema\n")),(0,n.kt)("h2",{id:"create-a-policy"},"Create a policy"),(0,n.kt)("p",null,"When there is a need to control the specific behaviours for a set of repositories, a policy can be\ncreated, based on the previous policy types."),(0,n.kt)("p",null,"A policy needs to be associated with a provider and a group ID, and it will be applied to all\nrepositories belonging to that group.\nThe policy can be created by using the provided defaults, or by providing a new one stored on a file."),(0,n.kt)("p",null,"For creating based on default ones:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"medic policy create --provider github --type branch_protection --default\n")),(0,n.kt)("p",null,"For creating based on a file:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"medic policy create --provider github --type branch_protection --file policy.yaml\n")),(0,n.kt)("p",null,"Where ",(0,n.kt)("inlineCode",{parentName:"p"},"policy.yaml")," has the following format, based on the provided json schema:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"branches:\n  - name: main\n    rules:\n      required_pull_request_reviews:\n        require_code_owner_reviews: true\n        required_approving_review_count: 2\n      allow_force_pushes: false\n      allow_deletions: false\n")),(0,n.kt)("p",null,"When an specific setting is not provided, the value of this setting is not compared against the policy.\nThis specific policy will monitor the ",(0,n.kt)("inlineCode",{parentName:"p"},"main")," branch for all related repositories, checking that pull request enforcement is on\nplace, requiring reviews from code owners and a minimum of 2 approvals before landing. It will also require\nthat force pushes and deletions are disabled for the ",(0,n.kt)("inlineCode",{parentName:"p"},"main")," branch."),(0,n.kt)("p",null,"When a policy for a provider and group is created, any repos registered for the same provider and group,\nare being observed. Each time that there is a change on the repo that causes a policy violation,\nthe event is triggered and the violation is being captured."),(0,n.kt)("h2",{id:"list-policy-status"},"List policy status"),(0,n.kt)("p",null,"When there is an event that causes a policy violation, the violation is stored in the database, and the\noverall status of the policy for this specific repository is changed.\nPolicy status will inform about:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"policy_type (branch_protection...)"),(0,n.kt)("li",{parentName:"ul"},"status: ","[success, failure]"),(0,n.kt)("li",{parentName:"ul"},"last updated: time when this status was updated")),(0,n.kt)("p",null,"Policy status can be checked at different levels:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Globally per provider and group, listing all related policy status:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"medic policy_status list --provider github --group-id 1\n")),(0,n.kt)("ol",{start:2},(0,n.kt)("li",{parentName:"ol"},"For an specific policy:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"medic policy_status list --policy-id 1\n")),(0,n.kt)("p",null,"or"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"medic policy get --id 1 --status --output yaml\n")),(0,n.kt)("ol",{start:3},(0,n.kt)("li",{parentName:"ol"},"For an specific repository:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"}," medic policy_status list --repo-id 19\n")),(0,n.kt)("p",null,"Where repo-id is the internal ID of the repository. That can be retrieved with:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"medic repo list --provider github --group-id 1\n")),(0,n.kt)("p",null,"Status for a repo can also be retrieved with:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"medic repo get --repo-id 64671386 -g 1 --provider github --status\n")),(0,n.kt)("p",null,"Where ",(0,n.kt)("inlineCode",{parentName:"p"},"repo-id")," is the repo ID for the provider."),(0,n.kt)("h2",{id:"list-policy-violations"},"List policy violations"),(0,n.kt)("p",null,"Client can also retrieve the historical of policy violations. A policy violation entry\nwill inform about:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"policy type"),(0,n.kt)("li",{parentName:"ul"},"internal repository ID"),(0,n.kt)("li",{parentName:"ul"},"repository owner"),(0,n.kt)("li",{parentName:"ul"},"repository name"),(0,n.kt)("li",{parentName:"ul"},"metadata: details of the entity that is violated (branch, provider repo id..)"),(0,n.kt)("li",{parentName:"ul"},"violation: detailed list of field and expected vs actual value")),(0,n.kt)("p",null,"The historical of policy violations can also be retrieved by client, at different levels:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Globally per provider and group, listing all related policy status:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"medic policy_violation list --provider github --group-id 1 --output yaml\n")),(0,n.kt)("ol",{start:2},(0,n.kt)("li",{parentName:"ol"},"For an specific policy:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"medic policy_status list --policy-id 1\n")),(0,n.kt)("p",null,"or"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"medic policy get --id 1 --status --output yaml\n")),(0,n.kt)("ol",{start:3},(0,n.kt)("li",{parentName:"ol"},"For an specific repository:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"}," medic policy_status list --repo-id 19\n")),(0,n.kt)("p",null,"Where repo-id is the internal ID of the repository. That can be retrieved with:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"medic repo list --provider github --group-id 1\n")),(0,n.kt)("p",null,"Status for a repo can also be retrieved with:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"medic repo get --repo-id 64671386 -g 1 --provider github --status\n")),(0,n.kt)("p",null,"Where ",(0,n.kt)("inlineCode",{parentName:"p"},"repo-id")," is the repo ID for the provider."))}d.isMDXComponent=!0}}]);