"use strict";(self.webpackChunkstacklok=self.webpackChunkstacklok||[]).push([[8855],{3905:(e,t,i)=>{i.d(t,{Zo:()=>s,kt:()=>f});var o=i(7294);function n(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function r(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,o)}return i}function l(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?r(Object(i),!0).forEach((function(t){n(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function a(e,t){if(null==e)return{};var i,o,n=function(e,t){if(null==e)return{};var i,o,n={},r=Object.keys(e);for(o=0;o<r.length;o++)i=r[o],t.indexOf(i)>=0||(n[i]=e[i]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)i=r[o],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(n[i]=e[i])}return n}var c=o.createContext({}),p=function(e){var t=o.useContext(c),i=t;return e&&(i="function"==typeof e?e(t):l(l({},t),e)),i},s=function(e){var t=p(e.components);return o.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var i=e.components,n=e.mdxType,r=e.originalType,c=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),d=p(i),m=n,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||r;return i?o.createElement(f,l(l({ref:t},s),{},{components:i})):o.createElement(f,l({ref:t},s))}));function f(e,t){var i=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=i.length,l=new Array(r);l[0]=m;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a[d]="string"==typeof e?e:n,l[1]=a;for(var p=2;p<r;p++)l[p]=i[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,i)}m.displayName="MDXCreateElement"},5327:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>p});var o=i(7462),n=(i(7294),i(3905));const r={},l=void 0,a={unversionedId:"cli/medic_policy_violation_list",id:"cli/medic_policy_violation_list",title:"medic_policy_violation_list",description:"medic policy_violation list",source:"@site/docs/cli/medic_policy_violation_list.md",sourceDirName:"cli",slug:"/cli/medic_policy_violation_list",permalink:"/cli/medic_policy_violation_list",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"mediator",previous:{title:"medic_policy_violation",permalink:"/cli/medic_policy_violation"},next:{title:"medic_repo",permalink:"/cli/medic_repo"}},c={},p=[{value:"medic policy_violation list",id:"medic-policy_violation-list",level:2},{value:"Synopsis",id:"synopsis",level:3},{value:"Options",id:"options",level:3},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:3},{value:"SEE ALSO",id:"see-also",level:3},{value:"Auto generated by spf13/cobra on 14-Jul-2023",id:"auto-generated-by-spf13cobra-on-14-jul-2023",level:6}],s={toc:p},d="wrapper";function u(e){let{components:t,...i}=e;return(0,n.kt)(d,(0,o.Z)({},s,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"medic-policy_violation-list"},"medic policy_violation list"),(0,n.kt)("p",null,"List policy violations within a mediator control plane"),(0,n.kt)("h3",{id:"synopsis"},"Synopsis"),(0,n.kt)("p",null,"The medic policy_violation list subcommand lets you list policy violations within a\nmediator control plane for an specific provider/group or policy id."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"medic policy_violation list [flags]\n")),(0,n.kt)("h3",{id:"options"},"Options"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'  -g, --group-id int32    group id to list policy violations for\n  -h, --help              help for list\n  -l, --limit int32       Limit the number of results returned (default -1)\n  -f, --offset int32      Offset the results returned\n  -o, --output string     Output format (json or yaml) (default "json")\n  -i, --policy-id int32   policy id to list policy violations for\n  -p, --provider string   Provider to list policy violations for\n  -r, --repo-id int32     repo id to list policy violations for\n')),(0,n.kt)("h3",{id:"options-inherited-from-parent-commands"},"Options inherited from parent commands"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'      --config string      config file (default is $PWD/config.yaml)\n      --grpc-host string   Server host (default "localhost")\n      --grpc-port int      Server port (default 8090)\n')),(0,n.kt)("h3",{id:"see-also"},"SEE ALSO"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/cli/medic_policy_violation"},"medic policy_violation"),"\t - Manage policy violations within a mediator control plane")),(0,n.kt)("h6",{id:"auto-generated-by-spf13cobra-on-14-jul-2023"},"Auto generated by spf13/cobra on 14-Jul-2023"))}u.isMDXComponent=!0}}]);