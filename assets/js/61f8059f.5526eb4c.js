"use strict";(self.webpackChunkstacklok=self.webpackChunkstacklok||[]).push([[1120],{3905:(t,e,r)=>{r.d(e,{Zo:()=>p,kt:()=>m});var n=r(67294);function i(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function o(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function a(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?o(Object(r),!0).forEach((function(e){i(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function l(t,e){if(null==t)return{};var r,n,i=function(t,e){if(null==t)return{};var r,n,i={},o=Object.keys(t);for(n=0;n<o.length;n++)r=o[n],e.indexOf(r)>=0||(i[r]=t[r]);return i}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(n=0;n<o.length;n++)r=o[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(i[r]=t[r])}return i}var c=n.createContext({}),s=function(t){var e=n.useContext(c),r=e;return t&&(r="function"==typeof t?t(e):a(a({},e),t)),r},p=function(t){var e=s(t.components);return n.createElement(c.Provider,{value:e},t.children)},u="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},y=n.forwardRef((function(t,e){var r=t.components,i=t.mdxType,o=t.originalType,c=t.parentName,p=l(t,["components","mdxType","originalType","parentName"]),u=s(r),y=i,m=u["".concat(c,".").concat(y)]||u[y]||d[y]||o;return r?n.createElement(m,a(a({ref:e},p),{},{components:r})):n.createElement(m,a({ref:e},p))}));function m(t,e){var r=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var o=r.length,a=new Array(o);a[0]=y;var l={};for(var c in e)hasOwnProperty.call(e,c)&&(l[c]=e[c]);l.originalType=t,l[u]="string"==typeof t?t:i,a[1]=l;for(var s=2;s<o;s++)a[s]=r[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}y.displayName="MDXCreateElement"},39083:(t,e,r)=>{r.r(e),r.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=r(87462),i=(r(67294),r(3905));const o={},a=void 0,l={unversionedId:"cli/medic_policy_status_get",id:"cli/medic_policy_status_get",title:"medic_policy_status_get",description:"medic policy_status get",source:"@site/docs/cli/medic_policy_status_get.md",sourceDirName:"cli",slug:"/cli/medic_policy_status_get",permalink:"/cli/medic_policy_status_get",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"mediator",previous:{title:"medic_policy_status",permalink:"/cli/medic_policy_status"},next:{title:"medic_policy_status_list",permalink:"/cli/medic_policy_status_list"}},c={},s=[{value:"medic policy_status get",id:"medic-policy_status-get",level:2},{value:"Synopsis",id:"synopsis",level:3},{value:"Options",id:"options",level:3},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:3},{value:"SEE ALSO",id:"see-also",level:3}],p={toc:s},u="wrapper";function d(t){let{components:e,...r}=t;return(0,i.kt)(u,(0,n.Z)({},p,r,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"medic-policy_status-get"},"medic policy_status get"),(0,i.kt)("p",null,"Get policy status within a mediator control plane"),(0,i.kt)("h3",{id:"synopsis"},"Synopsis"),(0,i.kt)("p",null,"The medic policy_status get subcommand lets you get policy status within a\nmediator control plane for an specific provider/group or policy id, entity type and entity id."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"medic policy_status get [flags]\n")),(0,i.kt)("h3",{id:"options"},"Options"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'  -e, --entity int32         entity id to get policy status for\n  -t, --entity-type string   the entity type to get policy status for (one of build_environment,artifact,repository)\n  -g, --group string         group id to get policy status for\n  -h, --help                 help for get\n  -o, --output string        Output format (json or yaml) (default "yaml")\n  -i, --policy int32         policy id to get policy status for\n  -p, --provider string      Provider to get policy status for (default "github")\n')),(0,i.kt)("h3",{id:"options-inherited-from-parent-commands"},"Options inherited from parent commands"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'      --config string      config file (default is $PWD/config.yaml)\n      --grpc-host string   Server host (default "localhost")\n      --grpc-port int      Server port (default 8090)\n')),(0,i.kt)("h3",{id:"see-also"},"SEE ALSO"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/cli/medic_policy_status"},"medic policy_status"),"\t - Manage policy status within a mediator control plane")))}d.isMDXComponent=!0}}]);