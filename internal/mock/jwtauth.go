// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stacklok/mediator/internal/auth (interfaces: JwtValidator)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	openid "github.com/lestrrat-go/jwx/v2/jwt/openid"
)

// MockJwtValidator is a mock of JwtValidator interface.
type MockJwtValidator struct {
	ctrl     *gomock.Controller
	recorder *MockJwtValidatorMockRecorder
}

// MockJwtValidatorMockRecorder is the mock recorder for MockJwtValidator.
type MockJwtValidatorMockRecorder struct {
	mock *MockJwtValidator
}

// NewMockJwtValidator creates a new mock instance.
func NewMockJwtValidator(ctrl *gomock.Controller) *MockJwtValidator {
	mock := &MockJwtValidator{ctrl: ctrl}
	mock.recorder = &MockJwtValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJwtValidator) EXPECT() *MockJwtValidatorMockRecorder {
	return m.recorder
}

// ParseAndValidate mocks base method.
func (m *MockJwtValidator) ParseAndValidate(arg0 string) (openid.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseAndValidate", arg0)
	ret0, _ := ret[0].(openid.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseAndValidate indicates an expected call of ParseAndValidate.
func (mr *MockJwtValidatorMockRecorder) ParseAndValidate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseAndValidate", reflect.TypeOf((*MockJwtValidator)(nil).ParseAndValidate), arg0)
}
